______________________________________________________Queue or linear Queue___________________________________________

#include <stdio.h>
#include <stdlib.h>
#define max 10


int rear = -1 ;
int front = -1 ;
int queue[max];

int IsFull()
{
    if(rear==max-1){
       return 1;
    }
    else
        return 0;
}

int IsEmpty()
{
    if(rear==-1&&front==-1)
    {
       return 1;
    }
    else
        return 0;
}


int Enqueue(int x)
{
    if(IsFull())
    {
        printf("queue is full");
    }
    else if ( IsEmpty())
        {
        rear=0;
        front=0;
        queue[rear]=x;
        }
        else
            {
        rear++;
        queue[rear]=x;
        }
}


int Dequeue()
     {
         if( IsEmpty())
         {
             printf("Queue is empty");
         }
         else if(rear==front)
         {
               printf("/n Dequeue item is %d",queue[front]);
               rear = front = -1 ;

         }
         else
         {
             printf(" \n Dequeue item is %d",queue[front]);
             front++;
         }
     }


int display()
{
    for( int i = front ; i < rear+1;i++)
    {
         printf(" %d",queue[i]);
    }
}





int main()

{
    Enqueue(5);
    Enqueue(6);
    Enqueue(1);
     Enqueue(7);
    Enqueue(10);
    display();
    Dequeue();
    Dequeue();


}



_____________________________________ Circular Queue_____________________________
#include <stdio.h>
#include <stdlib.h>
#define N 10


int rear = -1 ;
int front = -1 ;
int queue[N];



int IsEmpty()
{
    if(rear==-1&&front==-1)
    {
       return 1;
    }
    else
        return 0;
}


int Enqueue(int x)
{

   if ( IsEmpty())
        {
        rear=0;
        front=0;
        queue[rear]=x;
        }


    else if((rear+1)%N==front)
    {
        printf("queue is full");
    }


        else
            {
        rear= (rear+1)%N;
        queue[rear]=x;
        }
}


int Dequeue()
     {
         if( IsEmpty())
         {
             printf("Queue is empty");
         }
         else if(rear==front)
         {
               printf("/n Dequeue item is %d",queue[front]);
               rear = front = -1 ;

         }
         else
         {
             printf(" \n Dequeue item is %d",queue[front]);
             front= (front+1)%N;
         }
     }


int display()
{
int    i = front;
   while(i<=rear)
   {
       printf("%d",queue[i]);
       i = (i+1)%N;
   }
}





int main()

{
    Enqueue(5);
    Enqueue(6);
    Enqueue(1);
    display();
    Dequeue();

}


________________________________________________Stack _________________



#include <stdio.h>
#include <stdlib.h>
#define N 10
int stack[N];
int tos =-1;

int push( int x)
{
    if(tos==N-1)
    {
        printf("Stack is full");

    }
    else
        stack[++tos]=x;

}

int pop()
{
    if(tos==-1)
        printf("stack is empty");
    else
    printf("\n element poped %d  \n" , stack[tos--]);

    }

    int display()
    {

    for( int i = 0 ; i <=tos ; i++)
    {
        printf("%d",stack[i]);
    }
    }


    int main(){
    push(5);
    push(6);
    push(7);
    push(9);
    display();
    pop();
   display();

    }


_______________________________________________________________Malloc  or Calloc_______________________







#include <stdio.h>
#include <stdlib.h>

int main()
{


    int* ptr , sum;
    int n, i;


    printf("Enter number of elements:");
    scanf("%d",&n);


    ptr = (int*)malloc(n * sizeof(int));

    // ptr = (int*)calloc(n,sizeof(int));



    if (ptr == NULL) {
        printf("Memory not allocated.\n");
        exit(0);
    }
    else {

       for( int i= 0 ; i <n; i++)
    {
        scanf("%d", ptr+i);
        sum +=*(ptr+i);
    }

        printf("sum %d " ,sum);

    }

    return 0;
}





___________________________________________________________ Singly linklist__________________



#include <stdio.h>
#include <stdlib.h>

struct node
{
int data;
struct node *next;
};
struct node *head,*newnode,*temp;

int createlist()
{
    head = 0;

    int choice= 1 ;
    while(choice)
    {
       newnode = (struct node*)malloc(sizeof(struct node));
        printf("enter data = ");
        scanf("%d", &newnode->data);
        newnode->next=0;

    if ( head == 0)
    {
        head = temp = newnode;
    }
    else
    {
        temp->next = newnode;
        temp = newnode;
    }

       printf("do u want do continous ? ");
       scanf("%d",&choice);

    }
}


int display()
{
    printf("\n");
    temp = head ;
    while( temp !=0)
    {
        printf("%d " , temp->data);
        temp = temp->next;
    }
}


int InsertAtBeg()
{
    newnode = (struct node*)malloc(sizeof(struct node));
    printf("enter data to be inserted at beg ");
    scanf("%d",&newnode->data);
    newnode->next=head;
    head= newnode;
}


int InsertAtEnd()
{
    newnode = (struct node*)malloc(sizeof(struct node));
    printf("enter data to be inserted at end ");
    scanf("%d",&newnode->data);
    newnode->next= 0;
    temp = head ;
    while(temp->next!=0)
    {
        temp = temp->next ;
    }
    temp->next = newnode;

}


int InsertAtPos()

 {

int pos, i= 1;
printf("enter pos to be inserted");
scanf("%d",&pos);
newnode = (struct node*)malloc(sizeof(struct node));
 temp = head ;
 while (i<pos)
 {
     temp = temp->next;
     i++;
 }
   printf("enter data to be inserted at end ");
scanf("%d",&newnode->data);
newnode->next=temp->next;
temp->next = newnode;

}

int DeleteAtBeg()
{
    temp = head ;
    head  = temp->next ;
    free(temp);
}

int DeleteAtEnd()
{
    struct node *prev;

    temp = head;
    while(temp->next!=0)
    {
        prev =temp;
        temp= temp->next;
    }
    prev->next=0;
    free(temp);

}



int DeleteAtPos()
{
struct node *nextnode;
int pos, i= 1;
printf("enter pos to be deleted");
scanf("%d",&pos);
temp = head;
while(i<pos-1)
{
    temp = temp->next;
    i++;
}
nextnode = temp->next;
temp->next = nextnode->next;
free(nextnode);


}



int main()
{
    createlist();
    display();
    DeleteAtPos();
    display();
}



____________________________________________________________________Doubly Linklist__________________



#include <stdio.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node *next,*prev;
};
struct node *head,*temp, *newnode;

int createlinklist()
{
  head = 0 ;
  int choice = 1 ;
  while(choice)
  {
        newnode = (struct node*)malloc(sizeof(struct node));
        printf("enter data = ");
        scanf("%d",&newnode->data);
        newnode->next = 0 ;
        newnode->prev = 0 ;

        if(head == 0 )
        {
            head =temp =newnode;
        }
        else
        {
            temp->next = newnode;
            newnode->prev = temp;
            temp = newnode;


        }

    printf("do u want do continous ? ");
       scanf("%d",&choice);
  }
}



int display()
{
    printf("\n");
    temp = head ;
    while(temp!=0)
    {
        printf("%d",temp->data);
        temp = temp->next ;

    }
}



int InsertAtBeg()
{
    newnode = (struct node*)malloc(sizeof(struct node));
    printf("enter the data");
    scanf("%d",&newnode->data);
    newnode->prev=0;


    head->prev=newnode;
    newnode->next = head;
    head = newnode;
}

int InsertAtEnd()

{
    newnode = (struct node*)malloc(sizeof(struct node));
    printf("enter the data");
    scanf("%d",&newnode->data);
    temp = head ;
     while(temp->next!=0)
     {
         temp = temp->next;
     }
     temp->next = newnode;
     newnode->prev =temp;
     newnode->next=0;
     temp = newnode;

}


int InsertAtPos()

{
    int pos;
    int i=1;



    newnode = (struct node*)malloc(sizeof(struct node));
    printf("enter the pos ");
    scanf("%d",&pos);

temp = head;
    while(i<pos-1)
    {
        temp= temp->next;
        i++;
    }
    printf("enter the data to enter before that position");
    scanf("%d",&newnode->data);

newnode->next = temp->next;
newnode->prev =temp;
temp->next = newnode;
temp->next->prev =newnode;


}


int DeletefromBeg()
{


temp = head;
head = head->next;
head->prev =0;
free(temp);
}


int DeletefromEnd()
{
    temp = head;
    while(temp->next!=0)
    {

        temp= temp->next;
    }
    temp->prev->next = 0;
    free(temp);




}



int DeletefromPos()
{
    struct node *prevnode;
    int pos ;
    int i = 1 ;
    printf("enter the pos ");
    scanf("%d",&pos);
    temp = head;
while(i<pos)
{
    prevnode = temp;
    temp = temp->next;
    i++;
}

prevnode->next= temp->next;
free(temp);

}










int main()
{
    createlinklist();
    display();
DeletefromPos();
    display();
}


________________________________________________________________________________________________Array as linklist______________________





#include <stdio.h>
#include <stdlib.h>

#define max 10
int list[max],n;
   void display();
void create()
{

    printf("no of element");
    scanf("%d",&n);
    for(int i =0 ; i < n ; i++)
    {
        scanf("%d",&list[i]);
    }
    display();
}

void insert()
{
    int data, pos , i;
    printf("enter element and pos ");
    scanf("%d &d",&data,&pos);
    if(pos==n)
    {
        printf("overflow");
    }


    for(i=n-1;i>=pos-1;i--)
        {
        list[i+1]= list[i];
        }
        list[pos-1]=data;
        n=n+1;
display();
}



    void Delete()
    {
        int pos,i;
printf("enter pos  to delete");
scanf("&d",&pos);
printf("delete item = %d",list[pos-1]);

         for(i=pos-1;i<n-1;i++)
        {
        list[i]= list[i+1];
        }
        n =n-1;
        display();
    }



    void display()


    {
        for( int i=0;i<n;i++)
        {
            printf(" %d ",list[i]);
        }
    }




int main()

{
    create();
    Delete();


}








___________________________________________Stack as linklist__________________
include <stdio.h>  
#include <stdlib.h>  
void push();  
void pop();  
void display();  
struct node   
{  
int val;  
struct node *next;  
};  
struct node *head;  
  
void main ()  
{  
    int choice=0;     
    printf("\n*********Stack operations using linked list*********\n");  
    printf("\n----------------------------------------------\n");  
    while(choice != 4)  
    {  
        printf("\n\nChose one from the below options...\n");  
        printf("\n1.Push\n2.Pop\n3.Show\n4.Exit");  
        printf("\n Enter your choice \n");        
        scanf("%d",&choice);  
        switch(choice)  
        {  
            case 1:  
            {   
                push();  
                break;  
            }  
            case 2:  
            {  
                pop();  
                break;  
            }  
            case 3:  
            {  
                display();  
                break;  
            }  
            case 4:   
            {  
                printf("Exiting....");  
                break;   
            }  
            default:  
            {  
                printf("Please Enter valid choice ");  
            }   
    };  
}  
}  
void push ()  
{  
    int val;  
    struct node *ptr = (struct node*)malloc(sizeof(struct node));   
    if(ptr == NULL)  
    {  
        printf("not able to push the element");   
    }  
    else   
    {  
        printf("Enter the value");  
        scanf("%d",&val);  
        if(head==NULL)  
        {         
            ptr->val = val;  
            ptr -> next = NULL;  
            head=ptr;  
        }   
        else   
        {  
            ptr->val = val;  
            ptr->next = head;  
            head=ptr;  
               
        }  
        printf("Item pushed");  
          
    }  
}  
  
void pop()  
{  
    int item;  
    struct node *ptr;  
    if (head == NULL)  
    {  
        printf("Underflow");  
    }  
    else  
    {  
        item = head->val;  
        ptr = head;  
        head = head->next;  
        free(ptr);  
        printf("Item popped");  
          
    }  
}  
void display()  
{  
    int i;  
    struct node *ptr;  
    ptr=head;  
    if(ptr == NULL)  
    {  
        printf("Stack is empty\n");  
    }  
    else  
    {  
        printf("Printing Stack elements \n");  
        while(ptr!=NULL)  
        {  
            printf("%d\n",ptr->val);  
            ptr = ptr->next;  
        }  
    }  
}  



________________________________________Queue as Linklist_________________________________




#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node *next;
};
struct node *front;
struct node *rear;

void insert()
{
    struct node *ptr;
    int item;

    int choice = 1 ;
    while(choice)
    {
    ptr = (struct node *) malloc (sizeof(struct node));
    if(ptr == NULL)
    {
        printf("\nOVERFLOW\n");
        return;
    }
    else
    {
        printf("\nEnter value? ");
        scanf("%d",&ptr -> data );

        if(front == NULL)
        {
            front = ptr;
            rear = ptr;
            front -> next = NULL;
            rear -> next = NULL;
        }
        else
        {
            rear -> next = ptr;
            rear = ptr;
            rear->next = NULL;
        }
    }
        printf("\nEnter choice 1 / 0 ? ");
        scanf("%d",&choice );

    }




}



void Delete ()
{
    struct node *ptr;
    if(front == NULL)
    {
        printf("\nUNDERFLOW\n");
        return;
    }
    else
    {
        ptr = front;
        front = front -> next;
        free(ptr);
    }
}
void display()
{
    struct node *ptr;
    ptr = front;
    printf("\n");

    if(front == NULL)
    {
        printf("\nEmpty queue\n");
    }
    else
    {
        while(ptr != NULL)
        {
            printf(" %d ",ptr -> data);
            ptr = ptr -> next;
        }
    }
}



int main()
{

    insert();
    display();
     Delete();
    display();

}

























